import asyncio
from quart import Quart, jsonify, redirect, render_template_string
from tasks import add, batch_processing, batch2_processing, process_epitope_batch, celery
import aiofiles
import asyncio
import aiohttp
import pandas as pd
import os
import uvicorn
import uuid
import csv
import math
import re
import sys
from multidict import MultiDict
from bs4 import BeautifulSoup
from quart import Quart, jsonify, session, render_template, request, send_from_directory, abort
# import requests

app = Quart(__name__)
app.secret_key = '9cbf1e347601520c9c90ea8fc40b5739ece37ac2c4a90d05febf780b5513e63c'

UPLOAD_FOLDER = 'uploads'
OUTPUT_FOLDER = 'outputs'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['OUTPUT_FOLDER'] = OUTPUT_FOLDER
# Ensure directories exist
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(OUTPUT_FOLDER, exist_ok=True)

# HTML Template for Auto-Refreshing Page
RESULT_PAGE_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="refresh" content="60">
    <title>Task Status</title>
</head>
<body>
    <h2>Task Status: {{ status }}</h2>
    {% if result is not none %}
        <p>Result: {{ result }}</p>
    {% else %}
        <p>Waiting for result... Refreshing in 2 seconds.</p>
    {% endif %}
</body>
</html>
"""
# |-------------------------------Allele Data--------------------------------------|
hla_a1 = ['HLA-A01:01','HLA-A01:02','HLA-A01:03','HLA-A01:04','HLA-A01:06','HLA-A01:07','HLA-A01:08','HLA-A01:09','HLA-A01:10','HLA-A01:100','HLA-A01:101','HLA-A01:102','HLA-A01:103','HLA-A01:104','HLA-A01:105','HLA-A01:106','HLA-A01:107','HLA-A01:108','HLA-A01:109','HLA-A01:110','HLA-A01:111','HLA-A01:112','HLA-A01:113','HLA-A01:114','HLA-A01:115','HLA-A01:116','HLA-A01:117','HLA-A01:118','HLA-A01:119','HLA-A01:12','HLA-A01:120','HLA-A01:121','HLA-A01:122','HLA-A01:124','HLA-A01:125','HLA-A01:126','HLA-A01:127','HLA-A01:128','HLA-A01:129','HLA-A01:13','HLA-A01:130','HLA-A01:131','HLA-A01:132','HLA-A01:133','HLA-A01:134','HLA-A01:135','HLA-A01:136','HLA-A01:137','HLA-A01:138','HLA-A01:139','HLA-A01:14','HLA-A01:140','HLA-A01:141','HLA-A01:142','HLA-A01:143','HLA-A01:144','HLA-A01:145','HLA-A01:146','HLA-A01:148','HLA-A01:149','HLA-A01:150','HLA-A01:151','HLA-A01:152','HLA-A01:153','HLA-A01:154','HLA-A01:155','HLA-A01:156','HLA-A01:157','HLA-A01:158','HLA-A01:159','HLA-A01:161','HLA-A01:163','HLA-A01:164',
        'HLA-A01:165','HLA-A01:166','HLA-A01:167','HLA-A01:168','HLA-A01:169','HLA-A01:17','HLA-A01:170','HLA-A01:171','HLA-A01:172','HLA-A01:173','HLA-A01:174','HLA-A01:175','HLA-A01:176','HLA-A01:177','HLA-A01:180','HLA-A01:181','HLA-A01:182','HLA-A01:183','HLA-A01:184','HLA-A01:185','HLA-A01:187','HLA-A01:188','HLA-A01:189','HLA-A01:19','HLA-A01:190','HLA-A01:191','HLA-A01:192','HLA-A01:193','HLA-A01:194','HLA-A01:195','HLA-A01:196','HLA-A01:197','HLA-A01:198','HLA-A01:199','HLA-A01:20','HLA-A01:200','HLA-A01:201','HLA-A01:202','HLA-A01:203','HLA-A01:204','HLA-A01:205','HLA-A01:206','HLA-A01:207','HLA-A01:209','HLA-A01:21','HLA-A01:210','HLA-A01:211','HLA-A01:212','HLA-A01:213','HLA-A01:214','HLA-A01:215','HLA-A01:216','HLA-A01:217','HLA-A01:218','HLA-A01:219','HLA-A01:220','HLA-A01:221','HLA-A01:222','HLA-A01:223','HLA-A01:224','HLA-A01:225','HLA-A01:226','HLA-A01:227','HLA-A01:229','HLA-A01:23','HLA-A01:230','HLA-A01:231','HLA-A01:232','HLA-A01:233','HLA-A01:234','HLA-A01:235','HLA-A01:236','HLA-A01:237',
        'HLA-A01:238','HLA-A01:239','HLA-A01:24','HLA-A01:241','HLA-A01:242','HLA-A01:243','HLA-A01:244','HLA-A01:245','HLA-A01:246','HLA-A01:249','HLA-A01:25','HLA-A01:251','HLA-A01:252','HLA-A01:253','HLA-A01:254','HLA-A01:255','HLA-A01:256','HLA-A01:257','HLA-A01:259','HLA-A01:26','HLA-A01:28','HLA-A01:29','HLA-A01:260','HLA-A01:261','HLA-A01:262','HLA-A01:263','HLA-A01:264','HLA-A01:265','HLA-A01:266','HLA-A01:267','HLA-A01:268','HLA-A01:270','HLA-A01:271','HLA-A01:272','HLA-A01:273','HLA-A01:274','HLA-A01:275','HLA-A01:276','HLA-A01:277','HLA-A01:278','HLA-A01:279','HLA-A01:280','HLA-A01:281','HLA-A01:282','HLA-A01:283','HLA-A01:284','HLA-A01:286','HLA-A01:288','HLA-A01:289','HLA-A01:291','HLA-A01:292','HLA-A01:294','HLA-A01:295','HLA-A01:296','HLA-A01:297','HLA-A01:30','HLA-A01:32','HLA-A01:33','HLA-A01:35','HLA-A01:36','HLA-A01:37','HLA-A01:38','HLA-A01:39','HLA-A01:40','HLA-A01:41','HLA-A01:42','HLA-A01:43','HLA-A01:44','HLA-A01:45','HLA-A01:46','HLA-A01:47','HLA-A01:48','HLA-A01:49','HLA-A01:50','HLA-A01:51',
        'HLA-A01:54','HLA-A01:55','HLA-A01:58','HLA-A01:59','HLA-A01:60','HLA-A01:61','HLA-A01:62','HLA-A01:63','HLA-A01:64','HLA-A01:65','HLA-A01:66','HLA-A01:67','HLA-A01:68','HLA-A01:69','HLA-A01:70','HLA-A01:71','HLA-A01:72','HLA-A01:73','HLA-A01:74','HLA-A01:75','HLA-A01:76','HLA-A01:77','HLA-A01:78','HLA-A01:79','HLA-A01:80','HLA-A01:81','HLA-A01:82','HLA-A01:83','HLA-A01:84','HLA-A01:85','HLA-A01:86','HLA-A01:88','HLA-A01:89','HLA-A01:90','HLA-A01:91','HLA-A01:92','HLA-A01:93','HLA-A01:94','HLA-A01:95','HLA-A01:96','HLA-A01:97','HLA-A01:98','HLA-A01:99']

hla_a2 = ['HLA-A02:01','HLA-A02:02','HLA-A02:03','HLA-A02:04','HLA-A02:05','HLA-A02:06','HLA-A02:07','HLA-A02:08','HLA-A02:09','HLA-A02:10','HLA-A02:101','HLA-A02:102','HLA-A02:103','HLA-A02:104','HLA-A02:105','HLA-A02:106','HLA-A02:107','HLA-A02:108','HLA-A02:109','HLA-A02:11','HLA-A02:110','HLA-A02:111','HLA-A02:112','HLA-A02:114','HLA-A02:115','HLA-A02:116','HLA-A02:117','HLA-A02:118','HLA-A02:119','HLA-A02:12','HLA-A02:120','HLA-A02:121','HLA-A02:122','HLA-A02:123','HLA-A02:124','HLA-A02:126','HLA-A02:127','HLA-A02:128','HLA-A02:129','HLA-A02:13','HLA-A02:130','HLA-A02:131','HLA-A02:132','HLA-A02:133','HLA-A02:134','HLA-A02:135','HLA-A02:136','HLA-A02:137','HLA-A02:138','HLA-A02:139','HLA-A02:14','HLA-A02:140','HLA-A02:141','HLA-A02:142','HLA-A02:143','HLA-A02:144','HLA-A02:145','HLA-A02:146','HLA-A02:147','HLA-A02:148','HLA-A02:149','HLA-A02:150','HLA-A02:151','HLA-A02:152','HLA-A02:153','HLA-A02:154','HLA-A02:155','HLA-A02:156','HLA-A02:157','HLA-A02:158','HLA-A02:159','HLA-A02:16','HLA-A02:160','HLA-A02:161',
        'HLA-A02:162','HLA-A02:163','HLA-A02:164','HLA-A02:165','HLA-A02:166','HLA-A02:167','HLA-A02:168','HLA-A02:169','HLA-A02:17','HLA-A02:170','HLA-A02:171','HLA-A02:172','HLA-A02:173','HLA-A02:174','HLA-A02:175','HLA-A02:176','HLA-A02:177','HLA-A02:178','HLA-A02:179','HLA-A02:18','HLA-A02:180','HLA-A02:181','HLA-A02:182','HLA-A02:183','HLA-A02:184','HLA-A02:185','HLA-A02:186','HLA-A02:187','HLA-A02:188','HLA-A02:189','HLA-A02:19','HLA-A02:190','HLA-A02:191','HLA-A02:192','HLA-A02:193','HLA-A02:194','HLA-A02:195','HLA-A02:196','HLA-A02:197','HLA-A02:198','HLA-A02:199','HLA-A02:20','HLA-A02:200','HLA-A02:201','HLA-A02:202','HLA-A02:203','HLA-A02:204','HLA-A02:205','HLA-A02:206','HLA-A02:207','HLA-A02:208','HLA-A02:209','HLA-A02:21','HLA-A02:210','HLA-A02:211','HLA-A02:212','HLA-A02:213','HLA-A02:214','HLA-A02:215','HLA-A02:216','HLA-A02:217','HLA-A02:218','HLA-A02:219','HLA-A02:22','HLA-A02:220','HLA-A02:221','HLA-A02:224','HLA-A02:228','HLA-A02:229','HLA-A02:230','HLA-A02:231','HLA-A02:232','HLA-A02:233','HLA-A02:234',
        'HLA-A02:235','HLA-A02:236','HLA-A02:237','HLA-A02:238','HLA-A02:239','HLA-A02:24','HLA-A02:240','HLA-A02:241','HLA-A02:242','HLA-A02:243','HLA-A02:244','HLA-A02:245','HLA-A02:246','HLA-A02:247','HLA-A02:248','HLA-A02:249','HLA-A02:25','HLA-A02:251','HLA-A02:252','HLA-A02:253','HLA-A02:254','HLA-A02:255','HLA-A02:256','HLA-A02:257','HLA-A02:258','HLA-A02:259','HLA-A02:26','HLA-A02:260','HLA-A02:261','HLA-A02:262','HLA-A02:263','HLA-A02:264','HLA-A02:265','HLA-A02:266','HLA-A02:267','HLA-A02:268','HLA-A02:269','HLA-A02:27','HLA-A02:270','HLA-A02:271','HLA-A02:272','HLA-A02:273','HLA-A02:274','HLA-A02:275','HLA-A02:276','HLA-A02:277','HLA-A02:278','HLA-A02:279','HLA-A02:28','HLA-A02:280','HLA-A02:281','HLA-A02:282','HLA-A02:283','HLA-A02:285','HLA-A02:286','HLA-A02:287','HLA-A02:288','HLA-A02:289','HLA-A02:29','HLA-A02:290','HLA-A02:291','HLA-A02:292','HLA-A02:294','HLA-A02:295','HLA-A02:296','HLA-A02:297','HLA-A02:298','HLA-A02:299','HLA-A02:30','HLA-A02:300','HLA-A02:302','HLA-A02:303','HLA-A02:304','HLA-A02:306',
        'HLA-A02:307','HLA-A02:308','HLA-A02:309','HLA-A02:31','HLA-A02:310','HLA-A02:311','HLA-A02:312','HLA-A02:313','HLA-A02:315','HLA-A02:316','HLA-A02:317','HLA-A02:318','HLA-A02:319','HLA-A02:320','HLA-A02:322','HLA-A02:323','HLA-A02:324','HLA-A02:325','HLA-A02:326','HLA-A02:327','HLA-A02:328','HLA-A02:329','HLA-A02:33','HLA-A02:330','HLA-A02:331','HLA-A02:332','HLA-A02:333','HLA-A02:334','HLA-A02:335','HLA-A02:336','HLA-A02:337','HLA-A02:338','HLA-A02:339','HLA-A02:34','HLA-A02:340','HLA-A02:341','HLA-A02:342','HLA-A02:343','HLA-A02:344','HLA-A02:345','HLA-A02:346','HLA-A02:347','HLA-A02:348','HLA-A02:349','HLA-A02:35','HLA-A02:351','HLA-A02:352','HLA-A02:353','HLA-A02:354','HLA-A02:355','HLA-A02:357','HLA-A02:358','HLA-A02:359','HLA-A02:36','HLA-A02:360','HLA-A02:361','HLA-A02:362','HLA-A02:363','HLA-A02:364','HLA-A02:365','HLA-A02:367','HLA-A02:368','HLA-A02:369','HLA-A02:37','HLA-A02:370','HLA-A02:371','HLA-A02:372','HLA-A02:374','HLA-A02:375','HLA-A02:376','HLA-A02:377','HLA-A02:378','HLA-A02:379','HLA-A02:38',
        'HLA-A02:380','HLA-A02:381','HLA-A02:382','HLA-A02:383','HLA-A02:384','HLA-A02:385','HLA-A02:386','HLA-A02:387','HLA-A02:388','HLA-A02:389','HLA-A02:39','HLA-A02:390','HLA-A02:391','HLA-A02:392','HLA-A02:393','HLA-A02:394','HLA-A02:396','HLA-A02:397','HLA-A02:398','HLA-A02:399','HLA-A02:40','HLA-A02:400','HLA-A02:401','HLA-A02:402','HLA-A02:403','HLA-A02:404','HLA-A02:405','HLA-A02:406','HLA-A02:407','HLA-A02:408','HLA-A02:409','HLA-A02:41','HLA-A02:410','HLA-A02:411','HLA-A02:412','HLA-A02:413','HLA-A02:414','HLA-A02:415','HLA-A02:416','HLA-A02:417','HLA-A02:418','HLA-A02:419','HLA-A02:42','HLA-A02:420','HLA-A02:421','HLA-A02:422','HLA-A02:423','HLA-A02:424','HLA-A02:425','HLA-A02:426','HLA-A02:427','HLA-A02:428','HLA-A02:429','HLA-A02:430','HLA-A02:431','HLA-A02:432','HLA-A02:433','HLA-A02:434','HLA-A02:435','HLA-A02:436','HLA-A02:437','HLA-A02:438','HLA-A02:44','HLA-A02:441','HLA-A02:442','HLA-A02:443','HLA-A02:444','HLA-A02:445','HLA-A02:446','HLA-A02:447','HLA-A02:448','HLA-A02:449','HLA-A02:45','HLA-A02:450',
        'HLA-A02:451','HLA-A02:452','HLA-A02:453','HLA-A02:454','HLA-A02:455','HLA-A02:456','HLA-A02:457','HLA-A02:458','HLA-A02:459','HLA-A02:46','HLA-A02:460','HLA-A02:461','HLA-A02:462','HLA-A02:463','HLA-A02:464','HLA-A02:465','HLA-A02:466','HLA-A02:467','HLA-A02:469','HLA-A02:47','HLA-A02:470','HLA-A02:471','HLA-A02:472','HLA-A02:473','HLA-A02:474','HLA-A02:475','HLA-A02:477','HLA-A02:478','HLA-A02:479','HLA-A02:48','HLA-A02:480','HLA-A02:481','HLA-A02:482','HLA-A02:483','HLA-A02:484','HLA-A02:485','HLA-A02:486','HLA-A02:487','HLA-A02:488','HLA-A02:489','HLA-A02:49','HLA-A02:491','HLA-A02:492','HLA-A02:493','HLA-A02:494','HLA-A02:495','HLA-A02:496','HLA-A02:497','HLA-A02:498','HLA-A02:499','HLA-A02:50','HLA-A02:502','HLA-A02:503','HLA-A02:504','HLA-A02:505','HLA-A02:507','HLA-A02:508','HLA-A02:509','HLA-A02:51','HLA-A02:510','HLA-A02:511','HLA-A02:512','HLA-A02:513','HLA-A02:515','HLA-A02:517','HLA-A02:518','HLA-A02:519','HLA-A02:52','HLA-A02:520','HLA-A02:521','HLA-A02:522','HLA-A02:523','HLA-A02:524','HLA-A02:526',
        'HLA-A02:527','HLA-A02:528','HLA-A02:529','HLA-A02:530','HLA-A02:531','HLA-A02:532','HLA-A02:533','HLA-A02:534','HLA-A02:535','HLA-A02:536','HLA-A02:537','HLA-A02:538','HLA-A02:539','HLA-A02:54','HLA-A02:541','HLA-A02:542','HLA-A02:543','HLA-A02:544','HLA-A02:545','HLA-A02:546','HLA-A02:547','HLA-A02:548','HLA-A02:549','HLA-A02:55','HLA-A02:550','HLA-A02:551','HLA-A02:552','HLA-A02:553','HLA-A02:554','HLA-A02:555','HLA-A02:556','HLA-A02:557','HLA-A02:558','HLA-A02:559','HLA-A02:56','HLA-A02:560','HLA-A02:561','HLA-A02:562','HLA-A02:563','HLA-A02:564','HLA-A02:565','HLA-A02:566','HLA-A02:567','HLA-A02:568','HLA-A02:569','HLA-A02:57','HLA-A02:570','HLA-A02:571','HLA-A02:572','HLA-A02:573','HLA-A02:574','HLA-A02:575','HLA-A02:576','HLA-A02:577','HLA-A02:578','HLA-A02:579','HLA-A02:58','HLA-A02:580','HLA-A02:581','HLA-A02:582','HLA-A02:583','HLA-A02:584','HLA-A02:585','HLA-A02:586','HLA-A02:587','HLA-A02:588','HLA-A02:589','HLA-A02:59','HLA-A02:590','HLA-A02:591','HLA-A02:592','HLA-A02:593','HLA-A02:594','HLA-A02:595',
        'HLA-A02:596','HLA-A02:597','HLA-A02:598','HLA-A02:599','HLA-A02:60','HLA-A02:600','HLA-A02:601','HLA-A02:602','HLA-A02:603','HLA-A02:604','HLA-A02:606','HLA-A02:607','HLA-A02:609','HLA-A02:61','HLA-A02:610','HLA-A02:611','HLA-A02:612','HLA-A02:613','HLA-A02:614','HLA-A02:615','HLA-A02:616','HLA-A02:617','HLA-A02:619','HLA-A02:62','HLA-A02:620','HLA-A02:621','HLA-A02:623','HLA-A02:624','HLA-A02:625','HLA-A02:626','HLA-A02:627','HLA-A02:628','HLA-A02:629','HLA-A02:63','HLA-A02:630','HLA-A02:631','HLA-A02:632','HLA-A02:633','HLA-A02:634','HLA-A02:635','HLA-A02:636','HLA-A02:637','HLA-A02:638','HLA-A02:639','HLA-A02:64','HLA-A02:640','HLA-A02:641','HLA-A02:642','HLA-A02:644','HLA-A02:645','HLA-A02:646','HLA-A02:647','HLA-A02:648','HLA-A02:649','HLA-A02:65','HLA-A02:650','HLA-A02:651','HLA-A02:652','HLA-A02:653','HLA-A02:654','HLA-A02:655','HLA-A02:656','HLA-A02:657','HLA-A02:658','HLA-A02:659','HLA-A02:66','HLA-A02:660','HLA-A02:661','HLA-A02:662','HLA-A02:663','HLA-A02:664','HLA-A02:665','HLA-A02:666','HLA-A02:667',

        'HLA-A02:740','HLA-A02:741','HLA-A02:742','HLA-A02:743','HLA-A02:744','HLA-A02:745','HLA-A02:746','HLA-A02:747','HLA-A02:749','HLA-A02:75','HLA-A02:750','HLA-A02:751','HLA-A02:752','HLA-A02:753','HLA-A02:754','HLA-A02:755','HLA-A02:756','HLA-A02:757','HLA-A02:758','HLA-A02:759','HLA-A02:76','HLA-A02:761','HLA-A02:762','HLA-A02:763','HLA-A02:764','HLA-A02:765','HLA-A02:766','HLA-A02:767','HLA-A02:768','HLA-A02:769','HLA-A02:77','HLA-A02:770','HLA-A02:771','HLA-A02:772','HLA-A02:774','HLA-A02:776','HLA-A02:777','HLA-A02:778','HLA-A02:779','HLA-A02:78','HLA-A02:780','HLA-A02:781','HLA-A02:782','HLA-A02:783','HLA-A02:784','HLA-A02:785','HLA-A02:786','HLA-A02:787','HLA-A02:79','HLA-A02:790','HLA-A02:794','HLA-A02:795','HLA-A02:798','HLA-A02:799','HLA-A02:80','HLA-A02:800','HLA-A02:801','HLA-A02:802','HLA-A02:804','HLA-A02:808','HLA-A02:809','HLA-A02:81','HLA-A02:810','HLA-A02:811','HLA-A02:812','HLA-A02:813','HLA-A02:814','HLA-A02:815','HLA-A02:816','HLA-A02:817','HLA-A02:818','HLA-A02:819','HLA-A02:820','HLA-A02:821',
        'HLA-A02:822','HLA-A02:823','HLA-A02:824','HLA-A02:825','HLA-A02:84','HLA-A02:85','HLA-A02:86','HLA-A02:87','HLA-A02:89','HLA-A02:90','HLA-A02:91','HLA-A02:92','HLA-A02:93','HLA-A02:95','HLA-A02:96','HLA-A02:97','HLA-A02:99']

hal_a3 = [
    "HLA-A03:01", "HLA-A03:02", "HLA-A03:04", "HLA-A03:05", "HLA-A03:06", "HLA-A03:07", "HLA-A03:08", "HLA-A03:09",
    "HLA-A03:10", "HLA-A03:100", "HLA-A03:101", "HLA-A03:102", "HLA-A03:103", "HLA-A03:104", "HLA-A03:105", "HLA-A03:106",
    "HLA-A03:107", "HLA-A03:108", "HLA-A03:109", "HLA-A03:110", "HLA-A03:111", "HLA-A03:112", "HLA-A03:113", "HLA-A03:114",
    "HLA-A03:115", "HLA-A03:116", "HLA-A03:117", "HLA-A03:118", "HLA-A03:119", "HLA-A03:12", "HLA-A03:120", "HLA-A03:121",
    "HLA-A03:122", "HLA-A03:123", "HLA-A03:124", "HLA-A03:125", "HLA-A03:126", "HLA-A03:127", "HLA-A03:128", "HLA-A03:13",
    "HLA-A03:130", "HLA-A03:131", "HLA-A03:132", "HLA-A03:133", "HLA-A03:134", "HLA-A03:135", "HLA-A03:136", "HLA-A03:137",
    "HLA-A03:138", "HLA-A03:139", "HLA-A03:14", "HLA-A03:140", "HLA-A03:141", "HLA-A03:142", "HLA-A03:143", "HLA-A03:144",
    "HLA-A03:145", "HLA-A03:146", "HLA-A03:147", "HLA-A03:148", "HLA-A03:149", "HLA-A03:15", "HLA-A03:150", "HLA-A03:151",
    "HLA-A03:152", "HLA-A03:153", "HLA-A03:154", "HLA-A03:155", "HLA-A03:156", "HLA-A03:157", "HLA-A03:158", "HLA-A03:159",
    "HLA-A03:16", "HLA-A03:160", "HLA-A03:163", "HLA-A03:164", "HLA-A03:165", "HLA-A03:166", "HLA-A03:167", "HLA-A03:169",
    "HLA-A03:17", "HLA-A03:170", "HLA-A03:171", "HLA-A03:172", "HLA-A03:173", "HLA-A03:174", "HLA-A03:175", "HLA-A03:176",
    "HLA-A03:177", "HLA-A03:179", "HLA-A03:18", "HLA-A03:180", "HLA-A03:181", "HLA-A03:182", "HLA-A03:183", "HLA-A03:184",
    "HLA-A03:185", "HLA-A03:186", "HLA-A03:187", "HLA-A03:188", "HLA-A03:189", "HLA-A03:19", "HLA-A03:190", "HLA-A03:191",
    "HLA-A03:193", "HLA-A03:195", "HLA-A03:196", "HLA-A03:198", "HLA-A03:199", "HLA-A03:20", "HLA-A03:201", "HLA-A03:202",
    "HLA-A03:203", "HLA-A03:204", "HLA-A03:205", "HLA-A03:206", "HLA-A03:207", "HLA-A03:208", "HLA-A03:209", "HLA-A03:210",
    "HLA-A03:211", "HLA-A03:212", "HLA-A03:213", "HLA-A03:214", "HLA-A03:215", "HLA-A03:216", "HLA-A03:217", "HLA-A03:218",
    "HLA-A03:219", "HLA-A03:22", "HLA-A03:220", "HLA-A03:221", "HLA-A03:222", "HLA-A03:223", "HLA-A03:224", "HLA-A03:225",
    "HLA-A03:226", "HLA-A03:227", "HLA-A03:228", "HLA-A03:229", "HLA-A03:23", "HLA-A03:230", "HLA-A03:231", "HLA-A03:232",
    "HLA-A03:233", "HLA-A03:235", "HLA-A03:236", "HLA-A03:237", "HLA-A03:238", "HLA-A03:239", "HLA-A03:24", "HLA-A03:240",
    "HLA-A03:241", "HLA-A03:242", "HLA-A03:243", "HLA-A03:244", "HLA-A03:245", "HLA-A03:246", "HLA-A03:247", "HLA-A03:248",
    "HLA-A03:249", "HLA-A03:25", "HLA-A03:250", "HLA-A03:251", "HLA-A03:252", "HLA-A03:253", "HLA-A03:254", "HLA-A03:255",
    "HLA-A03:256", "HLA-A03:257", "HLA-A03:258", "HLA-A03:259", "HLA-A03:26", "HLA-A03:260", "HLA-A03:261", "HLA-A03:263",
    "HLA-A03:264", "HLA-A03:265", "HLA-A03:267", "HLA-A03:268", "HLA-A03:27", "HLA-A03:270", "HLA-A03:271", "HLA-A03:272",
    "HLA-A03:273", "HLA-A03:274", "HLA-A03:276", "HLA-A03:277", "HLA-A03:278", "HLA-A03:28", "HLA-A03:280", "HLA-A03:281",
    "HLA-A03:282", "HLA-A03:285", "HLA-A03:287", "HLA-A03:288", "HLA-A03:289", "HLA-A03:29", "HLA-A03:290", "HLA-A03:291",
    "HLA-A03:292", "HLA-A03:293", "HLA-A03:294", "HLA-A03:295", "HLA-A03:296", "HLA-A03:298", "HLA-A03:299", "HLA-A03:30",
    "HLA-A03:300", "HLA-A03:301", "HLA-A03:302", "HLA-A03:303", "HLA-A03:304", "HLA-A03:305", "HLA-A03:306", "HLA-A03:307",
    "HLA-A03:308", "HLA-A03:309", "HLA-A03:31", "HLA-A03:310", "HLA-A03:311", "HLA-A03:312", "HLA-A03:313", "HLA-A03:314",
    "HLA-A03:315", "HLA-A03:316", "HLA-A03:317", "HLA-A03:318", "HLA-A03:319", "HLA-A03:32", "HLA-A03:320", "HLA-A03:321",
    "HLA-A03:322", "HLA-A03:324", "HLA-A03:325", "HLA-A03:326", "HLA-A03:327", "HLA-A03:328", "HLA-A03:33", "HLA-A03:331",
    "HLA-A03:332", "HLA-A03:333", "HLA-A03:34", "HLA-A03:35", "HLA-A03:37", "HLA-A03:38", "HLA-A03:39", "HLA-A03:40"
]

hla_a11 = [
    "HLA-A11:01", "HLA-A11:02", "HLA-A11:03", "HLA-A11:04", "HLA-A11:05", "HLA-A11:06",
    "HLA-A11:07", "HLA-A11:08", "HLA-A11:09", "HLA-A11:10", "HLA-A11:100", "HLA-A11:101",
    "HLA-A11:102", "HLA-A11:103", "HLA-A11:104", "HLA-A11:105", "HLA-A11:106", "HLA-A11:107",
    "HLA-A11:108", "HLA-A11:11", "HLA-A11:110", "HLA-A11:111", "HLA-A11:112", "HLA-A11:113",
    "HLA-A11:114", "HLA-A11:116", "HLA-A11:117", "HLA-A11:118", "HLA-A11:119", "HLA-A11:12",
    "HLA-A11:120", "HLA-A11:121", "HLA-A11:122", "HLA-A11:123", "HLA-A11:124", "HLA-A11:125",
    "HLA-A11:126", "HLA-A11:128", "HLA-A11:129", "HLA-A11:13", "HLA-A11:130", "HLA-A11:131",
    "HLA-A11:132", "HLA-A11:133", "HLA-A11:134", "HLA-A11:135", "HLA-A11:136", "HLA-A11:138",
    "HLA-A11:139", "HLA-A11:14", "HLA-A11:140", "HLA-A11:141", "HLA-A11:142", "HLA-A11:143",
    "HLA-A11:144", "HLA-A11:145", "HLA-A11:146", "HLA-A11:147", "HLA-A11:148", "HLA-A11:149",
    "HLA-A11:15", "HLA-A11:150", "HLA-A11:151", "HLA-A11:152", "HLA-A11:153", "HLA-A11:154",
    "HLA-A11:155", "HLA-A11:156", "HLA-A11:157", "HLA-A11:158", "HLA-A11:159", "HLA-A11:16",
    "HLA-A11:160", "HLA-A11:161", "HLA-A11:162", "HLA-A11:163", "HLA-A11:164", "HLA-A11:165",
    "HLA-A11:166", "HLA-A11:167", "HLA-A11:168", "HLA-A11:169", "HLA-A11:17", "HLA-A11:171",
    "HLA-A11:172", "HLA-A11:173", "HLA-A11:174", "HLA-A11:175", "HLA-A11:176", "HLA-A11:177",
    "HLA-A11:178", "HLA-A11:179", "HLA-A11:18", "HLA-A11:181", "HLA-A11:183", "HLA-A11:184",
    "HLA-A11:185", "HLA-A11:186", "HLA-A11:187", "HLA-A11:188", "HLA-A11:189", "HLA-A11:19",
    "HLA-A11:190", "HLA-A11:191", "HLA-A11:192", "HLA-A11:193", "HLA-A11:194", "HLA-A11:195",
    "HLA-A11:196", "HLA-A11:197", "HLA-A11:198", "HLA-A11:199", "HLA-A11:20", "HLA-A11:200",
    "HLA-A11:201", "HLA-A11:202", "HLA-A11:203", "HLA-A11:204", "HLA-A11:205", "HLA-A11:206",
    "HLA-A11:207", "HLA-A11:209", "HLA-A11:211", "HLA-A11:212", "HLA-A11:213", "HLA-A11:214",
    "HLA-A11:216", "HLA-A11:217", "HLA-A11:218", "HLA-A11:219", "HLA-A11:22", "HLA-A11:220",
    "HLA-A11:221", "HLA-A11:222", "HLA-A11:223", "HLA-A11:224", "HLA-A11:225", "HLA-A11:226",
    "HLA-A11:227", "HLA-A11:228", "HLA-A11:229", "HLA-A11:23", "HLA-A11:230", "HLA-A11:231",
    "HLA-A11:232", "HLA-A11:233", "HLA-A11:234", "HLA-A11:236", "HLA-A11:237", "HLA-A11:239",
    "HLA-A11:24", "HLA-A11:240", "HLA-A11:241", "HLA-A11:242", "HLA-A11:243", "HLA-A11:244",
    "HLA-A11:245", "HLA-A11:246", "HLA-A11:247", "HLA-A11:248", "HLA-A11:249", "HLA-A11:25",
    "HLA-A11:250", "HLA-A11:252", "HLA-A11:253", "HLA-A11:254", "HLA-A11:255", "HLA-A11:257",
    "HLA-A11:258", "HLA-A11:259", "HLA-A11:26", "HLA-A11:260", "HLA-A11:261", "HLA-A11:262",
    "HLA-A11:263", "HLA-A11:264", "HLA-A11:265", "HLA-A11:266", "HLA-A11:267", "HLA-A11:268",
    "HLA-A11:269", "HLA-A11:27", "HLA-A11:270", "HLA-A11:271", "HLA-A11:273", "HLA-A11:274",
    "HLA-A11:275", "HLA-A11:276", "HLA-A11:277", "HLA-A11:278", "HLA-A11:279", "HLA-A11:280",
    "HLA-A11:281", "HLA-A11:282", "HLA-A11:283", "HLA-A11:284", "HLA-A11:285", "HLA-A11:286",
    "HLA-A11:288", "HLA-A11:289", "HLA-A11:29", "HLA-A11:290", "HLA-A11:291", "HLA-A11:292",
    "HLA-A11:293", "HLA-A11:294", "HLA-A11:295", "HLA-A11:296", "HLA-A11:297", "HLA-A11:298",
    "HLA-A11:299", "HLA-A11:30", "HLA-A11:300", "HLA-A11:301", "HLA-A11:302", "HLA-A11:303",
    "HLA-A11:304", "HLA-A11:305", "HLA-A11:306", "HLA-A11:307", "HLA-A11:308", "HLA-A11:309",
    "HLA-A11:31", "HLA-A11:311", "HLA-A11:312", "HLA-A11:32", "HLA-A11:33", "HLA-A11:34",
    "HLA-A11:35", "HLA-A11:36", "HLA-A11:37", "HLA-A11:38", "HLA-A11:39", "HLA-A11:40",
    "HLA-A11:41", "HLA-A11:42", "HLA-A11:43", "HLA-A11:44", "HLA-A11:45", "HLA-A11:46",
    "HLA-A11:47", "HLA-A11:48", "HLA-A11:49", "HLA-A11:51", "HLA-A11:53", "HLA-A11:54",
    "HLA-A11:55", "HLA-A11:56", "HLA-A11:57", "HLA-A11:58", "HLA-A11:59", "HLA-A11:60"
]

hla_a23 = [
    "HLA-A23:01", "HLA-A23:02", "HLA-A23:03", "HLA-A23:04", "HLA-A23:05", "HLA-A23:06", "HLA-A23:09",
    "HLA-A23:10", "HLA-A23:12", "HLA-A23:13", "HLA-A23:14", "HLA-A23:15", "HLA-A23:16", "HLA-A23:17",
    "HLA-A23:18", "HLA-A23:20", "HLA-A23:21", "HLA-A23:22", "HLA-A23:23", "HLA-A23:24", "HLA-A23:25",
    "HLA-A23:26", "HLA-A23:27", "HLA-A23:28", "HLA-A23:29", "HLA-A23:30", "HLA-A23:31", "HLA-A23:32",
    "HLA-A23:33", "HLA-A23:34", "HLA-A23:35", "HLA-A23:36", "HLA-A23:37", "HLA-A23:39", "HLA-A23:40",
    "HLA-A23:41", "HLA-A23:42", "HLA-A23:43", "HLA-A23:44", "HLA-A23:45", "HLA-A23:46", "HLA-A23:47",
    "HLA-A23:48", "HLA-A23:49", "HLA-A23:50", "HLA-A23:51", "HLA-A23:52", "HLA-A23:53", "HLA-A23:54",
    "HLA-A23:55", "HLA-A23:56", "HLA-A23:57", "HLA-A23:58", "HLA-A23:59", "HLA-A23:60", "HLA-A23:61",
    "HLA-A23:62", "HLA-A23:63", "HLA-A23:64", "HLA-A23:65", "HLA-A23:66", "HLA-A23:67", "HLA-A23:68",
    "HLA-A23:70", "HLA-A23:71", "HLA-A23:72", "HLA-A23:73", "HLA-A23:74", "HLA-A23:75", "HLA-A23:76",
    "HLA-A23:77", "HLA-A23:78", "HLA-A23:79", "HLA-A23:80", "HLA-A23:81", "HLA-A23:82", "HLA-A23:83",
    "HLA-A23:85", "HLA-A23:86", "HLA-A23:87", "HLA-A23:88", "HLA-A23:89", "HLA-A23:90", "HLA-A23:92"
]

hla_a24 = [
    "HLA-A24:02", "HLA-A24:03", "HLA-A24:04", "HLA-A24:05", "HLA-A24:06", 
    "HLA-A24:07", "HLA-A24:08", "HLA-A24:10", "HLA-A24:100", "HLA-A24:101",
    "HLA-A24:102", "HLA-A24:103", "HLA-A24:104", "HLA-A24:105", "HLA-A24:106",
    "HLA-A24:107", "HLA-A24:108", "HLA-A24:109", "HLA-A24:110", "HLA-A24:111",
    "HLA-A24:112", "HLA-A24:113", "HLA-A24:114", "HLA-A24:115", "HLA-A24:116",
    "HLA-A24:117", "HLA-A24:118", "HLA-A24:119", "HLA-A24:120", "HLA-A24:121",
    "HLA-A24:122", "HLA-A24:123", "HLA-A24:124", "HLA-A24:125", "HLA-A24:126",
    "HLA-A24:127", "HLA-A24:128", "HLA-A24:129", "HLA-A24:13", "HLA-A24:130",
    "HLA-A24:131", "HLA-A24:133", "HLA-A24:134", "HLA-A24:135", "HLA-A24:136",
    "HLA-A24:137", "HLA-A24:138", "HLA-A24:139", "HLA-A24:14", "HLA-A24:140",
    "HLA-A24:141", "HLA-A24:142", "HLA-A24:143", "HLA-A24:144", "HLA-A24:145",
    "HLA-A24:146", "HLA-A24:147", "HLA-A24:148", "HLA-A24:149", "HLA-A24:15",
    "HLA-A24:150", "HLA-A24:151", "HLA-A24:152", "HLA-A24:153", "HLA-A24:154",
    "HLA-A24:156", "HLA-A24:157", "HLA-A24:159", "HLA-A24:160", "HLA-A24:161",
    "HLA-A24:162", "HLA-A24:164", "HLA-A24:165", "HLA-A24:166", "HLA-A24:167",
    "HLA-A24:168", "HLA-A24:169", "HLA-A24:17", "HLA-A24:170", "HLA-A24:171",
    "HLA-A24:172", "HLA-A24:173", "HLA-A24:174", "HLA-A24:175", "HLA-A24:176",
    "HLA-A24:177", "HLA-A24:178", "HLA-A24:179", "HLA-A24:18", "HLA-A24:180",
    "HLA-A24:181", "HLA-A24:182", "HLA-A24:184", "HLA-A24:186", "HLA-A24:187",
    "HLA-A24:188", "HLA-A24:189", "HLA-A24:19", "HLA-A24:190", "HLA-A24:191",
    "HLA-A24:192", "HLA-A24:193", "HLA-A24:194", "HLA-A24:195", "HLA-A24:196",
    "HLA-A24:197", "HLA-A24:198", "HLA-A24:199", "HLA-A24:20", "HLA-A24:200",
    "HLA-A24:201", "HLA-A24:202", "HLA-A24:203", "HLA-A24:204", "HLA-A24:205",
    "HLA-A24:206", "HLA-A24:207", "HLA-A24:208", "HLA-A24:209", "HLA-A24:21",
    "HLA-A24:210", "HLA-A24:212", "HLA-A24:213", "HLA-A24:214", "HLA-A24:215",
    "HLA-A24:216", "HLA-A24:217", "HLA-A24:218", "HLA-A24:219", "HLA-A24:22",
    "HLA-A24:220", "HLA-A24:221", "HLA-A24:223", "HLA-A24:224", "HLA-A24:225",
    "HLA-A24:226", "HLA-A24:227", "HLA-A24:228", "HLA-A24:229", "HLA-A24:23"
]


hla_a25 = [
    "HLA-A25:01", "HLA-A25:02", "HLA-A25:03", "HLA-A25:04", "HLA-A25:05", 
    "HLA-A25:06", "HLA-A25:07", "HLA-A25:08", "HLA-A25:09", "HLA-A25:10", 
    "HLA-A25:11", "HLA-A25:13", "HLA-A25:14", "HLA-A25:15", "HLA-A25:16", 
    "HLA-A25:17", "HLA-A25:18", "HLA-A25:19", "HLA-A25:20", "HLA-A25:21", 
    "HLA-A25:22", "HLA-A25:23", "HLA-A25:24", "HLA-A25:25", "HLA-A25:26", 
    "HLA-A25:27", "HLA-A25:28", "HLA-A25:29", "HLA-A25:30", "HLA-A25:31", 
    "HLA-A25:32", "HLA-A25:33", "HLA-A25:34", "HLA-A25:35", "HLA-A25:36", 
    "HLA-A25:37", "HLA-A25:38", "HLA-A25:39", "HLA-A25:40", "HLA-A25:41", 
    "HLA-A25:43", "HLA-A25:44", "HLA-A25:45", "HLA-A25:46", "HLA-A25:47", 
    "HLA-A25:48", "HLA-A25:50", "HLA-A25:51", "HLA-A25:52", "HLA-A25:53", 
    "HLA-A25:54", "HLA-A25:55", "HLA-A25:56", "HLA-A25:57"
]

hla_a26 = [
    "HLA-A26:01", "HLA-A26:02", "HLA-A26:03", "HLA-A26:04", "HLA-A26:05",
    "HLA-A26:06", "HLA-A26:07", "HLA-A26:08", "HLA-A26:09", "HLA-A26:10",
    "HLA-A26:100", "HLA-A26:101", "HLA-A26:102", "HLA-A26:103", "HLA-A26:104",
    "HLA-A26:105", "HLA-A26:106", "HLA-A26:108", "HLA-A26:109", "HLA-A26:110",
    "HLA-A26:111", "HLA-A26:112", "HLA-A26:113", "HLA-A26:114", "HLA-A26:115",
    "HLA-A26:116", "HLA-A26:117", "HLA-A26:118", "HLA-A26:119", "HLA-A26:12",
    "HLA-A26:120", "HLA-A26:121", "HLA-A26:122", "HLA-A26:123", "HLA-A26:124",
    "HLA-A26:125", "HLA-A26:126", "HLA-A26:128", "HLA-A26:129", "HLA-A26:13",
    "HLA-A26:130", "HLA-A26:131", "HLA-A26:132", "HLA-A26:133", "HLA-A26:134",
    "HLA-A26:135", "HLA-A26:136", "HLA-A26:137", "HLA-A26:138", "HLA-A26:139",
    "HLA-A26:14", "HLA-A26:140", "HLA-A26:141", "HLA-A26:142", "HLA-A26:143",
    "HLA-A26:144", "HLA-A26:146", "HLA-A26:147", "HLA-A26:148", "HLA-A26:149",
    "HLA-A26:15", "HLA-A26:150", "HLA-A26:151", "HLA-A26:152", "HLA-A26:153",
    "HLA-A26:154", "HLA-A26:155", "HLA-A26:156", "HLA-A26:157", "HLA-A26:158",
    "HLA-A26:159", "HLA-A26:16", "HLA-A26:160", "HLA-A26:162", "HLA-A26:163",
    "HLA-A26:164", "HLA-A26:165", "HLA-A26:167", "HLA-A26:168", "HLA-A26:169",
    "HLA-A26:17", "HLA-A26:170", "HLA-A26:171", "HLA-A26:172", "HLA-A26:173",
    "HLA-A26:174", "HLA-A26:175", "HLA-A26:176", "HLA-A26:177", "HLA-A26:178",
    "HLA-A26:18", "HLA-A26:19", "HLA-A26:20", "HLA-A26:21", "HLA-A26:22",
    "HLA-A26:23", "HLA-A26:24", "HLA-A26:26", "HLA-A26:27", "HLA-A26:28",
    "HLA-A26:29", "HLA-A26:30", "HLA-A26:31", "HLA-A26:32", "HLA-A26:33",
    "HLA-A26:34", "HLA-A26:35", "HLA-A26:36", "HLA-A26:37", "HLA-A26:38",
    "HLA-A26:39", "HLA-A26:40", "HLA-A26:41", "HLA-A26:42", "HLA-A26:43",
    "HLA-A26:45", "HLA-A26:46", "HLA-A26:47", "HLA-A26:48", "HLA-A26:49",
    "HLA-A26:50", "HLA-A26:51", "HLA-A26:52", "HLA-A26:53", "HLA-A26:54",
    "HLA-A26:55", "HLA-A26:56", "HLA-A26:57", "HLA-A26:58", "HLA-A26:59",
    "HLA-A26:61", "HLA-A26:62", "HLA-A26:63", "HLA-A26:64", "HLA-A26:65",
    "HLA-A26:66", "HLA-A26:67", "HLA-A26:68", "HLA-A26:69", "HLA-A26:70",
    "HLA-A26:72", "HLA-A26:73", "HLA-A26:74", "HLA-A26:75", "HLA-A26:76",
    "HLA-A26:77", "HLA-A26:78", "HLA-A26:79", "HLA-A26:80", "HLA-A26:81",
    "HLA-A26:82", "HLA-A26:83", "HLA-A26:84", "HLA-A26:85", "HLA-A26:86",
    "HLA-A26:87", "HLA-A26:88", "HLA-A26:89", "HLA-A26:90", "HLA-A26:91",
    "HLA-A26:92", "HLA-A26:93", "HLA-A26:94", "HLA-A26:95", "HLA-A26:96",
    "HLA-A26:97", "HLA-A26:98", "HLA-A26:99"
]

hla_a29 = [
    "HLA-A29:01", "HLA-A29:02", "HLA-A29:03", "HLA-A29:04", "HLA-A29:05",
    "HLA-A29:06", "HLA-A29:07", "HLA-A29:09", "HLA-A29:10", "HLA-A29:100",
    "HLA-A29:101", "HLA-A29:102", "HLA-A29:103", "HLA-A29:104", "HLA-A29:105",
    "HLA-A29:106", "HLA-A29:107", "HLA-A29:108", "HLA-A29:109", "HLA-A29:11",
    "HLA-A29:110", "HLA-A29:111", "HLA-A29:113", "HLA-A29:114", "HLA-A29:115",
    "HLA-A29:116", "HLA-A29:117", "HLA-A29:118", "HLA-A29:119", "HLA-A29:12",
    "HLA-A29:120", "HLA-A29:121", "HLA-A29:122", "HLA-A29:123", "HLA-A29:124",
    "HLA-A29:125", "HLA-A29:127", "HLA-A29:128", "HLA-A29:13", "HLA-A29:14",
    "HLA-A29:15", "HLA-A29:16", "HLA-A29:17", "HLA-A29:18", "HLA-A29:19",
    "HLA-A29:20", "HLA-A29:21", "HLA-A29:22", "HLA-A29:23", "HLA-A29:24",
    "HLA-A29:25", "HLA-A29:26", "HLA-A29:27", "HLA-A29:28", "HLA-A29:29",
    "HLA-A29:30", "HLA-A29:31", "HLA-A29:32", "HLA-A29:33", "HLA-A29:34",
    "HLA-A29:35", "HLA-A29:36", "HLA-A29:37", "HLA-A29:38", "HLA-A29:39",
    "HLA-A29:40", "HLA-A29:41", "HLA-A29:42", "HLA-A29:43", "HLA-A29:44",
    "HLA-A29:45", "HLA-A29:46", "HLA-A29:47", "HLA-A29:48", "HLA-A29:49",
    "HLA-A29:50", "HLA-A29:51", "HLA-A29:52", "HLA-A29:53", "HLA-A29:54",
    "HLA-A29:55", "HLA-A29:56", "HLA-A29:57", "HLA-A29:58", "HLA-A29:59",
    "HLA-A29:60", "HLA-A29:61", "HLA-A29:62", "HLA-A29:63", "HLA-A29:64",
    "HLA-A29:65", "HLA-A29:66", "HLA-A29:67", "HLA-A29:68", "HLA-A29:69",
    "HLA-A29:70", "HLA-A29:71", "HLA-A29:72", "HLA-A29:73", "HLA-A29:74",
    "HLA-A29:75", "HLA-A29:76", "HLA-A29:77", "HLA-A29:79", "HLA-A29:80",
    "HLA-A29:81", "HLA-A29:82", "HLA-A29:83", "HLA-A29:84", "HLA-A29:85",
    "HLA-A29:86", "HLA-A29:87", "HLA-A29:88", "HLA-A29:89", "HLA-A29:90",
    "HLA-A29:91", "HLA-A29:92", "HLA-A29:93", "HLA-A29:94", "HLA-A29:95",
    "HLA-A29:96", "HLA-A29:97", "HLA-A29:98", "HLA-A29:99"
]
hla_a30 = [
    "HLA-A30:01", "HLA-A30:02", "HLA-A30:03", "HLA-A30:04", "HLA-A30:06",
    "HLA-A30:07", "HLA-A30:08", "HLA-A30:09", "HLA-A30:10", "HLA-A30:100",
    "HLA-A30:102", "HLA-A30:103", "HLA-A30:104", "HLA-A30:105", "HLA-A30:106",
    "HLA-A30:107", "HLA-A30:108", "HLA-A30:109", "HLA-A30:11", "HLA-A30:110",
    "HLA-A30:111", "HLA-A30:112", "HLA-A30:113", "HLA-A30:114", "HLA-A30:115",
    "HLA-A30:116", "HLA-A30:117", "HLA-A30:118", "HLA-A30:119", "HLA-A30:12",
    "HLA-A30:120", "HLA-A30:122", "HLA-A30:124", "HLA-A30:125", "HLA-A30:126",
    "HLA-A30:127", "HLA-A30:128", "HLA-A30:129", "HLA-A30:13", "HLA-A30:131",
    "HLA-A30:133", "HLA-A30:134", "HLA-A30:135", "HLA-A30:136", "HLA-A30:137",
    "HLA-A30:138", "HLA-A30:139", "HLA-A30:140", "HLA-A30:141", "HLA-A30:142",
    "HLA-A30:143", "HLA-A30:144", "HLA-A30:15", "HLA-A30:16", "HLA-A30:17",
    "HLA-A30:18", "HLA-A30:19", "HLA-A30:20", "HLA-A30:22", "HLA-A30:23",
    "HLA-A30:24", "HLA-A30:25", "HLA-A30:26", "HLA-A30:28", "HLA-A30:29",
    "HLA-A30:30", "HLA-A30:31", "HLA-A30:32", "HLA-A30:33", "HLA-A30:34",
    "HLA-A30:35", "HLA-A30:36", "HLA-A30:37", "HLA-A30:38", "HLA-A30:39",
    "HLA-A30:40", "HLA-A30:41", "HLA-A30:42", "HLA-A30:43", "HLA-A30:44",
    "HLA-A30:45", "HLA-A30:46", "HLA-A30:47", "HLA-A30:48", "HLA-A30:49",
    "HLA-A30:50", "HLA-A30:51", "HLA-A30:52", "HLA-A30:53", "HLA-A30:54",
    "HLA-A30:55", "HLA-A30:56", "HLA-A30:57", "HLA-A30:58", "HLA-A30:60",
    "HLA-A30:61", "HLA-A30:62", "HLA-A30:63", "HLA-A30:64", "HLA-A30:65",
    "HLA-A30:66", "HLA-A30:67", "HLA-A30:68", "HLA-A30:69", "HLA-A30:71",
    "HLA-A30:72", "HLA-A30:74", "HLA-A30:75", "HLA-A30:77", "HLA-A30:79",
    "HLA-A30:80", "HLA-A30:81", "HLA-A30:82", "HLA-A30:83", "HLA-A30:84",
    "HLA-A30:85", "HLA-A30:86", "HLA-A30:87", "HLA-A30:88", "HLA-A30:89",
    "HLA-A30:90", "HLA-A30:91", "HLA-A30:92", "HLA-A30:93", "HLA-A30:94",
    "HLA-A30:95", "HLA-A30:96", "HLA-A30:97", "HLA-A30:98", "HLA-A30:99"
]
hla_b = ['HLA-B07:02','HLA-B15:01','HLA-B27:05','HLA-B35:01','HLA-B39:01','HLA-B40:01','HLA-B58:01']

DR = [
    "DRB1_0101", "DRB1_0102", "DRB1_0103", "DRB1_0104", "DRB1_0105", "DRB1_0106", "DRB1_0107", "DRB1_0108",
    "DRB1_0109", "DRB1_0110", "DRB1_0111", "DRB1_0112", "DRB1_0113", "DRB1_0114", "DRB1_0115", "DRB1_0116",
    "DRB1_0117", "DRB1_0118", "DRB1_0119", "DRB1_0120", "DRB1_0121", "DRB1_0122", "DRB1_0123", "DRB1_0124",
    "DRB1_0125", "DRB1_0126", "DRB1_0127", "DRB1_0128"
]


DP_alpha = [
    "DPA1_0103", "DPA1_0104", "DPA1_0105", "DPA1_0106", "DPA1_0107", "DPA1_0108", "DPA1_0109", "DPA1_0110",
    "DPA1_0201", "DPA1_0202", "DPA1_0203", "DPA1_0204", "DPA1_0301", "DPA1_0302", "DPA1_0303", "DPA1_0401"
]


DP_beta = [
    "DPB1_0101", "DPB1_0201", "DPB1_0202", "DPB1_0301", "DPB1_0401", "DPB1_0402", "DPB1_0501", "DPB1_0601",
    "DPB1_0801", "DPB1_0901", "DPB1_10001", "DPB1_1001", "DPB1_10101", "DPB1_10201", "DPB1_10301", "DPB1_10401",
    "DPB1_10501", "DPB1_10601", "DPB1_10701", "DPB1_10801", "DPB1_10901", "DPB1_11001", "DPB1_1101", "DPB1_11101",
    "DPB1_11201", "DPB1_11301", "DPB1_11401", "DPB1_11501"
]


DQ_alpha = [
    "DQA1_0101", "DQA1_0102", "DQA1_0103", "DQA1_0104", "DQA1_0105", "DQA1_0106", "DQA1_0107", "DQA1_0108",
    "DQA1_0109", "DQA1_0201", "DQA1_0301", "DQA1_0302", "DQA1_0303", "DQA1_0401", "DQA1_0402", "DQA1_0404",
    "DQA1_0501", "DQA1_0503", "DQA1_0504", "DQA1_0505", "DQA1_0506", "DQA1_0507", "DQA1_0508", "DQA1_0509",
    "DQA1_0510", "DQA1_0511", "DQA1_0601", "DQA1_0602"
]

DQ_beta = [
    "DQB1_0201", "DQB1_0202", "DQB1_0203", "DQB1_0204", "DQB1_0205", "DQB1_0206", "DQB1_0301", "DQB1_0302",
    "DQB1_0303", "DQB1_0304", "DQB1_0305", "DQB1_0306", "DQB1_0307", "DQB1_0308", "DQB1_0309", "DQB1_0310",
    "DQB1_0311", "DQB1_0312", "DQB1_0313", "DQB1_0314", "DQB1_0315", "DQB1_0316", "DQB1_0317", "DQB1_0318",
    "DQB1_0319", "DQB1_0320", "DQB1_0321", "DQB1_0322"
]


Mouse = [
    "H_2_IAb", "H_2_IAd"
]


# |-------------------------------Filtering the csv file--------------------------------------|
async def filtering(input_csv, output_csv, cond=True):
    df = pd.read_csv(input_csv)
    # Apply the filter conditions
    if df.empty:
        print(f"Warning: {input_csv} contains only headers. Saving headers only to {output_csv}.")
        df.to_csv(output_csv, index=False)  # Save headers only
        return
    if cond:
        filtered_df = df[
            (df['Allergen Test'] == 'Non-Allergen') & 
            (df['Antigen Test'] == 'Pending') & #change this after proper implementation of antigen-test (vaxijen)
            (df['Signal P'] == 'Found')
        ]
    else:
        filtered_df = df[
            (df['Allergen Test'] == 'Non-Allergen') & 
            (df['Toxicity Test']=='Non-Toxin') &
            (df['Antigen Test'] == 'Pending')#change this after proper implementation of antigen-test (vaxijen)
        ]
    # Save the filtered data to a new CSV file
    filtered_df.to_csv(output_csv, index=False)
    print(f"Filtered data has been saved to {output_csv}")

async def merge_epitopes(file_paths):
    dfs = []
    for file_path in file_paths:
        try:
            df = pd.read_csv(file_path)
            if df.empty:
                print(f"Warning: {file_path} is empty.")
                continue
            # Determine cell type based on filename
            cell_type = file_path.split('/')[-1].split('_')[-1][:-4]
            print(cell_type)
            # Add cell type column
            df['Cell Type'] = cell_type

            # Handle missing columns for non-TH types
            # if cell_type != 'TH(IFN)':
            #     for col in ['Result', 'Allele', 'IFN_Gamma']:
            #         if col not in df.columns:
            #             df[col] = 'NA'

            # Reorder columns for consistent output
            df = df[['Cell Type', 'Protein ID', 'Epitope', 'Allergen Test', 'Toxicity Test', 'Antigen Test', 'Score']]
            # df = df[['Cell Type', 'Protein ID', 'Epitope', 'Allergen Test', 'Toxicity Test', 'Antigen Test', 'Score', 'Allele', 'Result', 'IFN_Gamma']]

        except FileNotFoundError:
            print(f"Error: File not found - {file_path}")
            continue

        dfs.append(df)

    # Concatenate DataFrames (handles potential missing columns)
    merged_df = pd.concat(dfs, ignore_index=True, sort=False)

    return merged_df


# |----------------------  Fasta to csv converter -----------------------------|
def is_natural_sequence(sequence):
    """Strictly check if sequence contains only standard amino acids"""
    standard_aa = set('ACDEFGHIKLMNPQRSTVWY')
    return all(aa in standard_aa for aa in sequence)

def parse_fasta(file):
    data = {
        'Protein ID': [],
        'Allergen Test': [],
        'Antigen Test': [],
        'Signal P': [],
        'Sequence': []
    }
    total_sequences = 0
    natural_sequences = 0

    with open(file, 'r') as f:
        protein_id = ""
        sequence = []

        for line in f:
            line = line.strip()
            if line.startswith('>'):
                if protein_id:
                    total_sequences += 1
                    full_sequence = ''.join(sequence).upper()
                    if is_natural_sequence(full_sequence):
                        natural_sequences += 1
                        data['Protein ID'].append(protein_id)
                        data['Sequence'].append(full_sequence)
                        data['Allergen Test'].append("Pending")
                        data['Antigen Test'].append("Pending")
                        data['Signal P'].append("Pending")
                protein_id = line[1:].split()[0]
                sequence = []
            else:
                sequence.append(line)

        if protein_id:
            total_sequences += 1
            full_sequence = ''.join(sequence).upper()
            if is_natural_sequence(full_sequence):
                natural_sequences += 1
                data['Protein ID'].append(protein_id)
                data['Sequence'].append(full_sequence)
                data['Allergen Test'].append("Pending")
                data['Antigen Test'].append("Pending")
                data['Signal P'].append("Pending")

    return data, total_sequences, natural_sequences

def fasta_to_csv(fasta_file, csv_file):
    data, total_seqs, natural_seqs = parse_fasta(fasta_file)
    df = pd.DataFrame(data)
    df.to_csv(csv_file, index=False)

@app.route("/task/<int:a>/<int:b>")
async def run_task(a, b):
    """Start an async addition task and redirect to result page."""
    task = add.apply_async(args=[a, b])
    print("calling task")
    print("Task ID:",task.id)
    
    # Redirect browser users to the result page
    return redirect(f"/result/{task.id}")

@app.route("/result/<task_id>/<step>/<dir_path>")
async def get_result(task_id, step, dir_path):
    """Fetch task result and display with auto-refresh."""
    task = celery.AsyncResult(task_id)
    print(task.state)
    if task.state == "PENDING":
        return await render_template(
            step,
            processing=True,
            id=task_id,
            file_processed=True,
            processed_filename=session.get('processed_filename',''),
            error_message=session.get('error_message'),
        )
        # return await render_template_string(RESULT_PAGE_TEMPLATE, status="PENDING", result=None), 202
    else:
        if os.path.exists(dir_path) and os.path.isdir(dir_path):  
            os.rmdir(dir_path)
        if task.state == "SUCCESS":
            session['file_processed'] = True
            session['processed_filename'] = session['converted_filename']
            return await render_template(
                step,
                processing=False,
                file_processed=session.get('file_processed'),
                processed_filename=session.get('processed_filename'),
                error_message=session.get('error_message')
            )
            # return await render_template_string(RESULT_PAGE_TEMPLATE, status="SUCCESS", result=task.result), 200
        elif task.state == "FAILURE":
            return await render_template_string(RESULT_PAGE_TEMPLATE, status="FAILURE", result="Error"), 500
        else:
            return await render_template_string(RESULT_PAGE_TEMPLATE, status=task.state, result=None), 202
        
@app.route('/download/<filename>')
async def download(filename):
    # Ensure the file exists in the output folder
    file_path = os.path.join(app.config['OUTPUT_FOLDER'], filename)
    
    if os.path.exists(file_path):
        return await send_from_directory(app.config['OUTPUT_FOLDER'], filename, as_attachment=True)
    else:
        # If the file does not exist, show a 404 error
        await abort(404, description="File not found.")

@app.route('/')
async def index():
    if 'user_id' not in session:
        session['user_id'] = str(uuid.uuid4())
    return await render_template('index.html')  # Landing page

@app.route('/step1', methods=['GET', 'POST'])
async def upload():
    session['step'] = 1  # Mark the current step as Step 1
    if request.method == 'POST':
        files = await request.files
        file = files.get('file')
        if file:
            filename = file.filename
            file_path = os.path.join(app.config['UPLOAD_FOLDER'], session['user_id']+filename)
            await file.save(file_path)
            session['file_path'] = file_path
        else:
            filename = 'default_file.fa'
            file_path = os.path.join(app.config['UPLOAD_FOLDER'],filename)
            session['file_path'] = file_path

        # Start the FinalF2C.py script (convert FA to CSV)
        try:
            converted_filename=f"{session['user_id']}.csv"
            if not os.path.exists(file_path):
                print(f"Error: Input file '{file_path}' does not exist!")
                sys.exit(1)

            fasta_to_csv(file_path, os.path.join(app.config['OUTPUT_FOLDER'], converted_filename))
            # subprocess.run(['python', './scripts/finalF2C.py', file_path, os.path.join(app.config['OUTPUT_FOLDER'], converted_filename)], check=True)
            session['file_converted'] = True
            session['converted_filename'] = converted_filename
            return await render_template('step1.html', file_uploaded=True, file_converted=True, converted_filename=session['converted_filename'])
        except Exception as e:
            session['error_message'] = e
            # session['error_message'] = "Error while converting the file. Please try again."
            return await render_template('step1.html', error_message=session['error_message'])
    return await render_template('step1.html', file_uploaded=False)
   
@app.route('/step2', methods=['GET', 'POST'])
async def step2():
    """Main batch processing function"""
    session['step'] = 2
    if 'file_converted' in session:
        dropdown_values = [round(i, 1) for i in [x * 0.1 for x in range(-5, 21)]]

        # Read the converted CSV to get the number of sequences
        csv_path = os.path.join(app.config['OUTPUT_FOLDER'], session['converted_filename'])
        with open(csv_path, 'r') as csvfile:
            reader = csv.reader(csvfile)
            available_sequences = sum(1 for _ in reader) - 1  # Count rows

        if request.method == 'POST':
            form_data = await request.form  # Quart automatically makes it async
            num_sequences = int(form_data["num_sequences"])
            selected_value = form_data.get('dropdown', '0.3')
            # session['num_sequences'] = num_sequences  # Save user selection
            try:
                dir_path = session['user_id']
                os.makedirs(dir_path, exist_ok=True)
                task = batch_processing.apply_async(args=[csv_path, selected_value, session['user_id'], num_sequences])

            except Exception as e:
                session['error_message'] = f"Error during Step 2: {str(e)}"
            
            return redirect(f"/result/{task.id}/step2.html/{dir_path}")

        return await render_template('step2.html', available_sequences=available_sequences, values=dropdown_values, processing=False)

@app.route('/step3', methods=['GET', 'POST'])
async def step3():
    session['step'] = 3  # Update to Step 4
    if 'file_processed' in session:
        if request.method == 'POST':
            # Start the filtration process
            session['processing'] = True  # Set the processing state
            try:
                fileName=session['user_id']+'_filtered.csv'
                output_csv=os.path.join(app.config['OUTPUT_FOLDER'], fileName)
                await asyncio.create_task(filtering(os.path.join(app.config['OUTPUT_FOLDER'], session['processed_filename']), output_csv))
                session['file_filtered'] = True
                session['file_processed'] = True
                session['filtered_filename'] = fileName  
                session['processing'] = False  # Clear processing state after completion
            except Exception:
                session['error_message'] = "Error during filtration process. Please try again."
                session['processing'] = False  # Clear processing state in case of an error
        else:
            session['file_processed'] = False
        return await render_template('step3.html', 
                               processing=session.get('processing'), 
                               file_processed=session.get('file_processed'), 
                               filtered_filename=session.get('filtered_filename'), 
                               error_message=session.get('error_message'))

@app.route('/step4', methods=['GET', 'POST'])
async def step4():
    session['step'] = 4 

    if 'file_processed' in session:
        threshold_values = [round(i,1) for i in [x * 0.1 for x in range(0, 11)]]
        window_values = [16,18]
        peptide_length = [8,9,10,11,12,13,14]
        supertype = ['A1','A2','A3','A24','A26','B7','B8','B27','B39','B44','B58','B62']
        
        if request.method == 'POST':
            form_data = await request.form  # Quart automatically makes it async
            threshold_value = float(form_data.get('threshold', '0.51'))
            window_size = int(form_data.get('window', '16'))
            type=form_data.get('supertype','A1')
            c_terminal = float(form_data.get('c_terminal', '0.15'))
            tap_efficiency = float(form_data.get('tap_efficiency', '0.05'))
            ctl_threshold = float(form_data.get('ctl_threshold', '0.75'))
            peptide_length = form_data.getlist('peptide_length', '10')
            peptide_length = ','.join(peptide_length)
            mhcii_peptide_length = form_data.getlist('mhcii_peptide_length', '10')
            mhcii_peptide_length = ','.join(mhcii_peptide_length)
            print(mhcii_peptide_length)
            alleles = form_data.getlist('alleles', 'HLA-B58:01')
            mhcii_alleles = form_data.getlist('mhcii_alleles', 'DPB1_0101')
            alleles = ','.join(alleles)
            mhcii_alleles = ','.join(mhcii_alleles)
            strongBinder = float(form_data.get('strongBinder', '0.5'))
            mhcii_strongBinder = float(form_data.get('mhcii_strongBinder', '1'))
            weakBinder = float(form_data.get('weakBinder', '2'))
            mhcii_weakBinder = float(form_data.get('mhcii_weakBinder', '5'))
            filteringThreshold = float(form_data.get('filteringThreshold', '-99'))
            radio = form_data.get('default')
            print(radio)

            try:
                inputFileName=os.path.join(app.config['OUTPUT_FOLDER'], session['filtered_filename'])
                bCell_FileName=session['user_id']+'_bCell.csv'
                tcA1Cell_FileName=session['user_id']+'_ctl.csv'
                tcB58Cell_FileName=session['user_id']+'_ht.csv'
                ifnCell_FileName=session['user_id']+'_ifn.csv'
                session['processing'] = True
                dir_path = session['user_id']
                os.makedirs(dir_path, exist_ok=True)
                values=[threshold_value, window_size, type, c_terminal, tap_efficiency, ctl_threshold, 
                        peptide_length, alleles, strongBinder, weakBinder, filteringThreshold,
                        mhcii_peptide_length, mhcii_alleles, mhcii_strongBinder, mhcii_weakBinder
                        ]
                task = batch2_processing.apply_async(args=[inputFileName,app.config['OUTPUT_FOLDER'], session['user_id'], values])
                if os.path.exists(dir_path) and os.path.isdir(dir_path):  
                    os.rmdir(dir_path)
                session['bCell_filename'] = bCell_FileName  # Simulate result file names
                session['tca1_filename'] = tcA1Cell_FileName  # Simulate result file names
                session['tcb58_filename'] = tcB58Cell_FileName
                session['ifn_filename'] = ifnCell_FileName
                session['file_processed'] = True
                return redirect(f"/result/{task.id}/step4.html/{dir_path}")
            except Exception as e:
                session['file_processed'] = False
                print(f"Error running B: {e}")
            finally:
                session['file_processed'] = True
                session['processing'] = False
        else:
            session['file_processed'] = False


        # Pass session values to the template
        return await render_template(
            'step4.html',
            file_processed=session.get('file_processed', False),
            processing=session.get('processing', False),
            bCell_filename=session.get('bCell_filename', ''),
            filtered_filename=session.get('filtered_filename', ''),
            threshold=threshold_values,
            window=window_values,supertype=supertype,
            peptide_length=peptide_length,hla_a1=hla_a1,hla_a2=hla_a2,hla_a11=hla_a11,
            hla_a23=hla_a23,hla_a24=hla_a24,hla_a25=hla_a25,hla_a26=hla_a26,hla_a29=hla_a29,
            hla_a30=hla_a30,hla_b=hla_b,DR=DR,
            DP_alpha=DP_alpha,DP_beta=DP_beta,DQ_alpha=DQ_alpha,DQ_beta=DQ_beta,Mouse=Mouse
        )

@app.route('/step5', methods=['GET', 'POST'])
async def step5():
    session['step'] = 5  # Update to Step 4
    if 'file_converted' in session:
        dropdown_values = [round(i, 1) for i in [x * 0.1 for x in range(-5, 21)]]
        if request.method == 'POST':
            form_data = await request.form  # Quart automatically makes it async
            selected_value = form_data.get('dropdown', '0.3')
            # Start background processing using Celery
            bcell_csv=os.path.join(app.config['OUTPUT_FOLDER'], session['bCell_filename'])
            ctl_csv=os.path.join(app.config['OUTPUT_FOLDER'], session['tca1_filename'])
            th_csv=os.path.join(app.config['OUTPUT_FOLDER'], session['tcb58_filename'])
            th_ifn=os.path.join(app.config['OUTPUT_FOLDER'], session['ifn_filename'])
            dir_path = session['user_id']
            try:
                task = process_epitope_batch.apply_async(args=[session['user_id'], bcell_csv, ctl_csv, th_csv, th_ifn, selected_value])
                print(f"Task ID: {task.id}")

            except Exception as e:
                session['error_message'] = f"Error during Step 5: {str(e)}"
            
            return redirect(f"/result/{task.id}/step5.html/{dir_path}")

        return await render_template('step5.html', values=dropdown_values)

@app.route('/step6', methods=['GET', 'POST'])
async def step6():
    session['step'] = 6  # Update to Step 4
    if 'file_processed' in session:
        if request.method == 'POST':
            # Start the filtration process
            session['processing'] = True  # Set the processing state
            bcell_csv=os.path.join(app.config['OUTPUT_FOLDER'], session['bCell_filename'])
            ctl_csv=os.path.join(app.config['OUTPUT_FOLDER'], session['tca1_filename'])
            th_csv=os.path.join(app.config['OUTPUT_FOLDER'], session['tcb58_filename'])
            th_ifn=os.path.join(app.config['OUTPUT_FOLDER'], session['ifn_filename'])
            try:
                filtered_bcell_filename=session['user_id']+'_filtered_bcell.csv'
                filtered_ctl_filename=session['user_id']+'_filtered_ctl.csv'
                filtered_th_filename=session['user_id']+'_filtered_th.csv'
                filtered_ifn_filename=session['user_id']+'_filtered_ifn.csv'
                filtered_bcell_csv=os.path.join(app.config['OUTPUT_FOLDER'], filtered_bcell_filename)
                filtered_ctl_csv=os.path.join(app.config['OUTPUT_FOLDER'], filtered_ctl_filename)
                filtered_th_csv=os.path.join(app.config['OUTPUT_FOLDER'], filtered_th_filename)
                filtered_ifn_csv=os.path.join(app.config['OUTPUT_FOLDER'], filtered_ifn_filename)
                session['filtered_bCell_filename']=filtered_bcell_filename
                session['filtered_ctl_filename']=filtered_ctl_filename
                session['filtered_ht_filename']=filtered_th_filename
                session['filtered_ifn_filename']=filtered_ifn_filename
                print(session)
                await asyncio.create_task(filtering(bcell_csv, filtered_bcell_csv,False))
                await asyncio.create_task(filtering(ctl_csv, filtered_ctl_csv,False))
                await asyncio.create_task(filtering(th_csv, filtered_th_csv,False))
                await asyncio.create_task(filtering(th_ifn, filtered_ifn_csv,False))
                # session['file_filtered'] = True
                session['file_processed'] = True
                session['processing'] = False  # Clear processing state after completion
            except Exception:
                print("Error during filtration process. Please try again.")
                session['error_message'] = "Error during filtration process. Please try again."
                session['processing'] = False  # Clear processing state in case of an error
        else:
            session['file_processed'] = False
        return await render_template('step6.html', 
                               processing=session.get('processing'), 
                               file_processed=session.get('file_processed'), 
                               filtered_bCell_filename=session.get('filtered_bCell_filename', ''), 
                               filtered_ctl_csv=session.get('filtered_ctl_filename', ''), 
                               filtered_ht_filename=session.get('filtered_ht_filename', ''), 
                               filtered_ifn_filename=session.get('filtered_ifn_filename', ''), 
                               error_message=session.get('error_message'))

@app.route('/step7', methods=['GET', 'POST'])
async def step7():
    session['step'] = 7  # Update to Step 9
    if 'file_processed' in session:
        # Handle POST request when the user clicks "Start Filtration"
        if request.method == 'POST':
            # Start the filtration process
            session['processing'] = True  # Set the processing state
            try:
                file_paths = [
                    os.path.join(app.config['OUTPUT_FOLDER'], session['filtered_bCell_filename']),
                    os.path.join(app.config['OUTPUT_FOLDER'], session['filtered_ctl_filename']),
                    os.path.join(app.config['OUTPUT_FOLDER'], session['filtered_ht_filename']),
                    os.path.join(app.config['OUTPUT_FOLDER'], session['filtered_ifn_filename']),
                ]
                merged_epitopes = await asyncio.create_task(merge_epitopes(file_paths))
                # Save the merged DataFrame to a CSV file
                outputFileName=session['user_id']+'_final_merged_file.csv'
                output_csv=os.path.join(app.config['OUTPUT_FOLDER'],outputFileName)
                merged_epitopes.to_csv(output_csv, index=False)
                session['file_filtered'] = True
                session['file_processed'] = True
                session['final_merged_filename'] = outputFileName  # Replace with actual output filename
                session['processing'] = False  # Clear processing state after completion
            except Exception:
                print("Error during filtration process. Please try again.")
                session['error_message'] = "Error during filtration process. Please try again."
                session['processing'] = False  # Clear processing state in case of an error
        else:
            session['file_processed'] = False
        return await render_template('step7.html', 
                               processing=session.get('processing'), 
                               file_processed=session.get('file_processed'), 
                               filtered_filename=session.get('final_merged_filename'), 
                               error_message=session.get('error_message'))

@app.route('/last', methods=['GET', 'POST'])
async def last():
    steps_files = {
        # "File1: Fasta to CSV": session['converted_filename'],
        # "Step2: Allergenicity Test": session['processed_filename'],
        # "Step3: Signal P Detection": session['processed_filename'],
        "File1: Filtered Sequence File": session['filtered_filename'],
        "File2: B Cell Epitopes File": session['filtered_bCell_filename'],
        "File3: TC(A1) Epitope Detection": session['filtered_ctl_filename'],
        "File4: TC(B58) Epitope Detection": session['filtered_ht_filename'],
        "File5: TH Epitope Detection": session['filtered_ifn_filename'],
        "File6: Final Merged File": session['final_merged_filename'],
    }
    final_filename = "final_merged_output.csv"

    return await render_template(
        'last.html',
        steps_files=steps_files,
        final_filename=final_filename
    )
    
if __name__ == "__main__":
    # app.run(debug=True, host="0.0.0.0", port=8000)
    uvicorn.run("app:app", host="0.0.0.0", port=8000, reload=True)